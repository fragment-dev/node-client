import { writeFileSync } from "fs";
import path from "path";

import { generate } from "@graphql-codegen/cli";
import type { Types } from "@graphql-codegen/plugin-helpers";
import prettier from "prettier";

const GENERATED_FILENAME = "generated/generated.ts";

generate(
  {
    schema: "https://api.fragment.dev/schema.graphql",
    emitLegacyCommonJSImports: false,
    generates: {
      [GENERATED_FILENAME]: {
        documents: "src/queries/**/*.graphql",
        config: {
          scalars: {
            ID: "string",
            JSON: "Record<string, unknown>",
          },
          withHooks: true,
          defaultScalarType: "string",
          useImplementingTypes: true,
        },
        plugins: [
          "typescript",
          "typescript-operations",
          "typescript-graphql-request",
          {
            add: {
              content:
                "/* This file was generated by `yarn gen-clients`. Don't edit it directly */ \n/* eslint-disable @typescript-eslint/no-explicit-any */",
            },
          },
        ],
      },
    },
  },
  false,
)
  .then(async ([fileOutput]: Types.FileOutput[]) => {
    const output = fileOutput.content.replace(
      /import gql from 'graphql-tag'/g,
      "import { gql } from 'graphql-tag'",
    );
    const prettifiedOutput = await prettier.format(output, {
      parser: "typescript",
    });
    const qualifiedFilename = path.resolve(process.cwd(), fileOutput.filename);
    writeFileSync(qualifiedFilename, prettifiedOutput, "utf-8");
    process.exit(0);
  })
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
